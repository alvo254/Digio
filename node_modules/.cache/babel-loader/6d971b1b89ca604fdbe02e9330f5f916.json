{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPathMatch = getPathMatch;\n\nvar _pathToRegexp = require(\"next/dist/compiled/path-to-regexp\");\n\nfunction getPathMatch(path, options) {\n  const keys = [];\n  const regexp = (0, _pathToRegexp).pathToRegexp(path, keys, {\n    delimiter: '/',\n    sensitive: false,\n    strict: options === null || options === void 0 ? void 0 : options.strict\n  });\n  const matcher = (0, _pathToRegexp).regexpToFunction((options === null || options === void 0 ? void 0 : options.regexModifier) ? new RegExp(options.regexModifier(regexp.source), regexp.flags) : regexp, keys);\n  /**\n  * A matcher function that will check if a given pathname matches the path\n  * given in the builder function. When the path does not match it will return\n  * `false` but if it does it will return an object with the matched params\n  * merged with the params provided in the second argument.\n  */\n\n  return (pathname, params) => {\n    const res = pathname == null ? false : matcher(pathname);\n\n    if (!res) {\n      return false;\n    }\n    /**\n    * If unnamed params are not allowed they must be removed from\n    * the matched parameters. path-to-regexp uses \"string\" for named and\n    * \"number\" for unnamed parameters.\n    */\n\n\n    if (options === null || options === void 0 ? void 0 : options.removeUnnamedParams) {\n      for (const key of keys) {\n        if (typeof key.name === 'number') {\n          delete res.params[key.name];\n        }\n      }\n    }\n\n    return { ...params,\n      ...res.params\n    };\n  };\n}","map":{"version":3,"mappings":";;;;;QA2BgBA;;AA1Ba,iBAAmC,+CAAnC;;SA0BbA,aAAaC,MAAcC,SAAmB;EAC5D,MAAMC,IAAI,GAAU,EAApB;EACA,MAAMC,MAAM,OAAGC,aAAH,EAAeA,YAAf,CAAgBJ,IAAhB,EAAsBE,IAAtB,EAA4B;IACtCG,SAAS,EAAE,GAD2B;IAEtCC,SAAS,EAAE,KAF2B;IAGtCC,MAAM,EAAEN,OAAO,SAAPA,WAAO,WAAPA,mBAAO,CAAEM;EAHqB,CAA5B,CAAZ;EAMA,MAAMC,OAAO,OAAGC,aAAH,EAAmBA,gBAAnB,CAAmB,CAC9BR,OAAO,SAAPA,WAAO,WAAPA,mBAAO,CAAES,aADqB,IAE1B,IAAIC,MAAJ,CAAWV,OAAO,CAACS,aAART,CAAsBE,MAAM,CAACS,MAA7BX,CAAX,EAAiDE,MAAM,CAACU,KAAxD,CAF0B,GAG1BV,MAHO,EAIXD,IAJW,CAAb;EAOA;;;;;;;EAMA,OAAM,CACJY,QADI,EAEJC,MAFI,KAGU;IACd,MAAMC,GAAG,GAAGF,QAAQ,IAAI,IAAZA,GAAmB,KAAnBA,GAA2BN,OAAO,CAACM,QAAD,CAA9C;;IACA,IAAE,CAAGE,GAAL,EAAU;MACR,OAAO,KAAP;IACD;IAED;;;;;;;IAKA,IAAIf,OAAO,SAAPA,WAAO,WAAPA,mBAAO,CAAEgB,mBAAb,EAAkC;MAChC,KAAK,MAAMC,GAAX,IAAkBhB,IAAlB,EAAwB;QACtB,IAAI,OAAOgB,GAAG,CAACC,IAAX,KAAoB,QAAxB,EAAkC;UAChC,OAAQH,GAAG,CAACD,MAAJC,CAAmBE,GAAG,CAACC,IAAvBH,CAAR;QACD;MACF;IACF;;IAED,OAAO,KAAKD,MAAL;SAAgBC,GAAG,CAACD;IAApB,CAAP;EACD,CAvBD;AAwBD","names":["getPathMatch","path","options","keys","regexp","pathToRegexp","delimiter","sensitive","strict","matcher","regexpToFunction","regexModifier","RegExp","source","flags","pathname","params","res","removeUnnamedParams","key","name"],"sources":["../../../../../shared/lib/router/utils/path-match.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}