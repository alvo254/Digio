{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getParametrizedRoute = getParametrizedRoute;\nexports.getRouteRegex = getRouteRegex;\n\nvar _escapeRegexp = require(\"../../escape-regexp\");\n\nfunction parseParameter(param) {\n  const optional = param.startsWith('[') && param.endsWith(']');\n\n  if (optional) {\n    param = param.slice(1, -1);\n  }\n\n  const repeat = param.startsWith('...');\n\n  if (repeat) {\n    param = param.slice(3);\n  }\n\n  return {\n    key: param,\n    repeat,\n    optional\n  };\n}\n\nfunction getParametrizedRoute(route) {\n  const segments = (route.replace(/\\/$/, '') || '/').slice(1).split('/');\n  const groups = {};\n  let groupIndex = 1;\n  const parameterizedRoute = segments.map(segment => {\n    if (segment.startsWith('[') && segment.endsWith(']')) {\n      const {\n        key,\n        optional,\n        repeat\n      } = parseParameter(segment.slice(1, -1));\n      groups[key] = {\n        pos: groupIndex++,\n        repeat,\n        optional\n      };\n      return repeat ? optional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';\n    } else {\n      return `/${(0, _escapeRegexp).escapeStringRegexp(segment)}`;\n    }\n  }).join(''); // dead code eliminate for browser since it's only needed\n  // while generating routes-manifest\n\n  if (typeof window === 'undefined') {\n    let routeKeyCharCode = 97;\n    let routeKeyCharLength = 1; // builds a minimal routeKey using only a-z and minimal number of characters\n\n    const getSafeRouteKey = () => {\n      let routeKey = '';\n\n      for (let i = 0; i < routeKeyCharLength; i++) {\n        routeKey += String.fromCharCode(routeKeyCharCode);\n        routeKeyCharCode++;\n\n        if (routeKeyCharCode > 122) {\n          routeKeyCharLength++;\n          routeKeyCharCode = 97;\n        }\n      }\n\n      return routeKey;\n    };\n\n    const routeKeys = {};\n    let namedParameterizedRoute = segments.map(segment => {\n      if (segment.startsWith('[') && segment.endsWith(']')) {\n        const {\n          key,\n          optional,\n          repeat\n        } = parseParameter(segment.slice(1, -1)); // replace any non-word characters since they can break\n        // the named regex\n\n        let cleanedKey = key.replace(/\\W/g, '');\n        let invalidKey = false; // check if the key is still invalid and fallback to using a known\n        // safe key\n\n        if (cleanedKey.length === 0 || cleanedKey.length > 30) {\n          invalidKey = true;\n        }\n\n        if (!isNaN(parseInt(cleanedKey.slice(0, 1)))) {\n          invalidKey = true;\n        }\n\n        if (invalidKey) {\n          cleanedKey = getSafeRouteKey();\n        }\n\n        routeKeys[cleanedKey] = key;\n        return repeat ? optional ? `(?:/(?<${cleanedKey}>.+?))?` : `/(?<${cleanedKey}>.+?)` : `/(?<${cleanedKey}>[^/]+?)`;\n      } else {\n        return `/${(0, _escapeRegexp).escapeStringRegexp(segment)}`;\n      }\n    }).join('');\n    return {\n      parameterizedRoute,\n      namedParameterizedRoute,\n      groups,\n      routeKeys\n    };\n  }\n\n  return {\n    parameterizedRoute,\n    groups\n  };\n}\n\nfunction getRouteRegex(normalizedRoute) {\n  const result = getParametrizedRoute(normalizedRoute);\n\n  if ('routeKeys' in result) {\n    return {\n      re: new RegExp(`^${result.parameterizedRoute}(?:/)?$`),\n      groups: result.groups,\n      routeKeys: result.routeKeys,\n      namedRegex: `^${result.namedParameterizedRoute}(?:/)?$`\n    };\n  }\n\n  return {\n    re: new RegExp(`^${result.parameterizedRoute}(?:/)?$`),\n    groups: result.groups\n  };\n}","map":{"version":3,"mappings":"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","names":["getParametrizedRoute","getRouteRegex","parseParameter","param","optional","startsWith","endsWith","slice","repeat","key","route","segments","replace","split","groups","groupIndex","parameterizedRoute","map","segment","pos","escapeStringRegexp","join","window","routeKeyCharCode","routeKeyCharLength","getSafeRouteKey","routeKey","i","String","fromCharCode","routeKeys","namedParameterizedRoute","cleanedKey","invalidKey","length","isNaN","parseInt","normalizedRoute","result","re","RegExp","namedRegex"],"sources":["../../../../../shared/lib/router/utils/route-regex.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}